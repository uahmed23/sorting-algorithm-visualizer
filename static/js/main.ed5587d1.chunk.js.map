{"version":3,"sources":["components/Header.js","hooks/useHover.js","Context.js","components/Algorithm.js","components/Display.js","components/Control.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","useHover","useState","hovered","setHovered","ref","useRef","enter","leave","useEffect","current","addEventListener","removeEventListener","Context","React","createContext","ContextProvider","children","array","setArray","start","setStart","sortSpeed","setSortSpeed","localStorage","getItem","setItem","tempLen","arraySize","setArraySize","sortType","setSortType","animationArr","randomizeArray","randArray","i","randNum","Math","floor","random","push","value","isSorted","isCompared","isSwitch","sleep","ms","Promise","resolve","setTimeout","a","randArr","slice","j","min_idx","key","maxHeap","input","left","right","max","length","temp","mergeSort","arr","l","r","m","k","L","R","n1","n2","changedIdx","merge","quickSort","low","high","partitionIndex","pivot","partition","Provider","startSort","bubbleSort","selectionSort","insertionSort","heapSort","mergedArr","tempArr","intervalId","setInterval","clearInterval","intervalId2","animateSort","quickArr","console","log","quickAnimate","stopSort","window","location","reload","Algorithm","props","useContext","selectedId","name","className","disabled","id","onClick","Display","bar","map","element","index","barColor","style","height","backgroundColor","Control","playHover","playRef","resetHover","resetRef","playIcon","resetIcon","onChange","event","target","type","min","speed","Home","App","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed5587d1.chunk.js","sourcesContent":["import React, { useContext } from \"react\"\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Header() {\r\n\r\n    return (\r\n        <header>\r\n            {/* <Link to=\"/\"><h2>Sorting Algorithms</h2></Link> */}\r\n            <h2>Sorting Algorithms</h2>\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Header","import { useState, useEffect, useRef } from \"react\"\r\n\r\nfunction useHover() {\r\n\r\n    const [hovered, setHovered] = useState(false)\r\n    const ref = useRef(null)\r\n\r\n    function enter() {\r\n        setHovered(true)\r\n    }\r\n    function leave() {\r\n        setHovered(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        ref.current.addEventListener(\"mouseenter\", enter)\r\n        ref.current.addEventListener(\"mouseleave\", leave)\r\n\r\n        return () => {\r\n            ref.current.removeEventListener(\"mouseenter\", enter)\r\n            ref.current.removeEventListener(\"mouseleave\", leave)\r\n        }\r\n    }, [])\r\n\r\n    return [hovered, ref]\r\n}\r\n\r\nexport default useHover","import React, { useState, useEffect } from 'react'\r\nimport useHover from './hooks/useHover'\r\nconst Context = React.createContext()\r\n\r\nfunction ContextProvider({ children }) {\r\n\r\n    const [array, setArray] = useState([])\r\n    const [start, setStart] = useState(false)\r\n    const [sortSpeed, setSortSpeed] = useState(0)\r\n\r\n    if (!localStorage.getItem('currSort'))\r\n        localStorage.setItem('currSort', \"bubble\");\r\n    if (!localStorage.getItem('arrSize'))\r\n        localStorage.setItem('arrSize', 50);\r\n\r\n    const [arraySize, setArraySize] = useState(localStorage.getItem('arrSize'))\r\n    const [sortType, setSortType] = useState(localStorage.getItem('currSort'))\r\n\r\n    let animationArr = []\r\n    let tempLen\r\n    // let index = 0\r\n    // let freeze = false\r\n\r\n    //makes array when component mounts\r\n    useEffect(() => {\r\n        randomizeArray()\r\n    }, [arraySize])\r\n\r\n    //randomizes the array, used when component first mounts and when user refreshes\r\n    function randomizeArray() {\r\n        const randArray = []\r\n        let i = 0;\r\n        const max = 100;\r\n        const min = 10;\r\n\r\n        for (i = 0; i < arraySize; i++) {\r\n            const randNum = Math.floor(Math.random() * (max - min)) + min\r\n            randArray.push({\r\n                value: randNum,\r\n                isSorted: false,\r\n                isCompared: false,\r\n                isSwitch: false\r\n            });\r\n        }\r\n        setArray(randArray)\r\n    }\r\n\r\n    //too cause delay\r\n    function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    //BUBBLESORT O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O \r\n    async function bubbleSort() {\r\n\r\n        const randArr = array.slice()\r\n\r\n        for (let i = 0; i < arraySize - 1; i++) {\r\n            for (let j = 0; j < arraySize - i - 1; j++) {\r\n\r\n                //comparing\r\n                randArr[j].isCompared = true\r\n                randArr[j + 1].isCompared = true\r\n                randArr[j].value > randArr[j + 1].value ? randArr[j + 1].isSwitch = true : randArr[j + 1].isSwitch = false\r\n                setArray(randArr.slice())\r\n\r\n\r\n                await sleep(sortSpeed);\r\n\r\n                if (randArr[j].value > randArr[j + 1].value) {\r\n                    [randArr[j], randArr[j + 1]] = [randArr[j + 1], randArr[j]]\r\n                    setArray(randArr.slice())\r\n                }\r\n\r\n                //done comparing\r\n                randArr[j].isCompared = false\r\n                randArr[j + 1].isCompared = false\r\n                randArr[j].isSwitch = false\r\n                setArray(randArr.slice())\r\n\r\n            }\r\n            //doneSorting\r\n            randArr[arraySize - 1 - i].isSorted = true\r\n            i === arraySize - 2 ? randArr[0].isSorted = true : randArr[0].isSorted = false\r\n            setArray(randArr.slice())\r\n        }\r\n\r\n        setStart(false)\r\n    }\r\n\r\n    //SELECTIONSORT - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \r\n    async function selectionSort() {\r\n\r\n        const randArr = array.slice()\r\n\r\n        let min_idx = 0\r\n\r\n        for (let i = 0; i < arraySize - 1; i++) {\r\n            min_idx = i;\r\n\r\n            randArr[i].isCompared = true\r\n            setArray(randArr.slice())\r\n\r\n\r\n\r\n            for (let j = i + 1; j < arraySize; j++) {\r\n\r\n                randArr[j].isCompared = true\r\n                setArray(randArr.slice())\r\n\r\n                await sleep(sortSpeed);\r\n                if (randArr[j].value < randArr[min_idx].value) {\r\n                    randArr[min_idx].isSwitch = false\r\n                    min_idx = j\r\n                    randArr[min_idx].isSwitch = true\r\n                }\r\n\r\n\r\n                randArr[j].isCompared = false\r\n                setArray(randArr.slice())\r\n\r\n            }\r\n\r\n            [randArr[i], randArr[min_idx]] = [randArr[min_idx], randArr[i]]\r\n            randArr[min_idx].isCompared = false\r\n            randArr[i].isSwitch = false\r\n            randArr[i].isSorted = true\r\n\r\n            // randArr[i].isSwitch = false\r\n            setArray(randArr.slice())\r\n\r\n        }\r\n\r\n        randArr[arraySize - 1].isSorted = true\r\n        setArray(randArr.slice())\r\n        setStart(false)\r\n    }\r\n\r\n    //INSERTIONSORT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \r\n    async function insertionSort() {\r\n\r\n        const randArr = array.slice()\r\n\r\n        let key = 0;\r\n\r\n        for (let i = 1; i < arraySize; i++) {\r\n\r\n            randArr[i].isSorted = true\r\n            setArray(randArr.slice())\r\n            key = randArr[i].value;\r\n\r\n            let j = i - 1;\r\n\r\n            if (randArr[j].value <= key) {\r\n                await sleep(sortSpeed);\r\n            }\r\n\r\n            while (j >= 0 && randArr[j].value > key) {\r\n\r\n                randArr[j + 1].isSwitch = true;\r\n                randArr[j].isCompared = true\r\n                if (j === i - 1) {\r\n                    randArr[j].isCompared = false\r\n                    randArr[j].isSorted = true\r\n                }\r\n                setArray(randArr.slice())\r\n\r\n                await sleep(sortSpeed);\r\n\r\n                randArr[j + 1].isSwitch = false;\r\n                randArr[j].isCompared = false\r\n                randArr[j].isSorted = false\r\n                setArray(randArr.slice())\r\n\r\n                randArr[j + 1].value = randArr[j].value;\r\n                randArr[j].value = key\r\n                j = j - 1;\r\n            }\r\n\r\n            randArr[i].isSorted = false\r\n            setArray(randArr.slice())\r\n        }\r\n\r\n        for (let i = arraySize - 1; i >= 0; i--) {\r\n            randArr[i].isSorted = true\r\n            setArray(randArr.slice())\r\n            await sleep(0);\r\n        }\r\n        setArray(randArr.slice())\r\n        setStart(false)\r\n    }\r\n\r\n    //HEAPSORT /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\r\n\r\n\r\n    async function maxHeap(input, i) {\r\n\r\n        const left = 2 * i + 1\r\n        const right = 2 * i + 2\r\n        let max = i\r\n\r\n        input[i].isCompared = false\r\n\r\n        if ((left < tempLen)) {\r\n            input[left].isSwitch = false\r\n            if (input[left].value > input[max].value) {\r\n                max = left\r\n            }\r\n        }\r\n        if (right < tempLen) {\r\n            input[right].isSwitch = false\r\n\r\n            if (input[right].value > input[max].value) {\r\n                max = right\r\n            }\r\n        }\r\n        if (max !== i) {\r\n\r\n            [input[i], input[max]] = [input[max], input[i]]\r\n            maxHeap(input, max)\r\n        }\r\n    }\r\n\r\n    async function heapSort(input) {\r\n\r\n        tempLen = input.length\r\n        let heaped = false\r\n        let temp\r\n\r\n        for (let i = Math.floor(tempLen / 2); i >= 0; i = i - 1) {\r\n\r\n            input[i].isCompared = true\r\n            if (2 * i + 2 < tempLen) {\r\n                input[2 * i + 2].isSwitch = true\r\n            }\r\n            if (2 * i + 1 < tempLen) {\r\n                input[2 * i + 1].isSwitch = true\r\n            }\r\n            setArray(input.slice())\r\n\r\n            await sleep(sortSpeed)\r\n            maxHeap(input, i)\r\n            setArray(input.slice())\r\n\r\n        }\r\n\r\n        heaped = true\r\n\r\n        if (heaped) {\r\n\r\n            for (let i = arraySize - 1; i > 0; i--) {\r\n\r\n                input[i].isSwitch = true\r\n                input[0].isCompared = true\r\n                setArray(input.slice())\r\n\r\n                temp = input[0]\r\n                input[0] = input[i]\r\n                input[i] = temp\r\n                // [input[0], input[i]] = [input[i], input[0]]\r\n\r\n                await sleep(sortSpeed)\r\n\r\n                setArray(input.slice())\r\n                await sleep(sortSpeed)\r\n                input[0].isSwitch = false\r\n                input[i].isCompared = false\r\n\r\n\r\n                tempLen = tempLen - 1\r\n\r\n                input[i].isSorted = true\r\n                if (i === 1) { input[0].isSorted = true }\r\n                setArray(input.slice())\r\n\r\n                await sleep(sortSpeed)\r\n\r\n                input[0].isCompared = true\r\n                if (2 < tempLen) {\r\n                    input[2].isSwitch = true\r\n                }\r\n                if (1 < tempLen) {\r\n                    input[1].isSwitch = true\r\n                }\r\n                setArray(input.slice())\r\n                await sleep(sortSpeed)\r\n                maxHeap(input, 0)\r\n                setArray(input.slice())\r\n                await sleep(sortSpeed)\r\n\r\n            }\r\n\r\n\r\n        }\r\n        setStart(false)\r\n    }\r\n\r\n    //MERGESORT -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\r\n\r\n\r\n    function mergeSort(arr, l, r) {\r\n        if (l < r) {\r\n\r\n            let m = Math.floor((l + r) / 2);\r\n\r\n            mergeSort(arr, l, m);\r\n            mergeSort(arr, m + 1, r);\r\n\r\n            merge(arr, l, m, r);\r\n        }\r\n\r\n    }\r\n\r\n    function merge(arr, l, m, r) {\r\n        let i, j, k;\r\n        let n1 = m - l + 1;\r\n        let n2 = r - m;\r\n\r\n        let L, R\r\n\r\n        L = arr.slice(l, l + n1)\r\n        R = arr.slice(m + 1, m + 1 + n2)\r\n\r\n        i = 0; // Initial index of first subarray \r\n        j = 0; // Initial index of second subarray \r\n        k = l; // Initial index of merged subarray \r\n        while (i < n1 && j < n2) {\r\n            if (L[i].value <= R[j].value) {\r\n                animationArr.push({ changedIdx: k, length: L[i].value, isCompared: true })\r\n\r\n                arr[k] = L[i];\r\n                i++;\r\n            }\r\n            else {\r\n                animationArr.push({ changedIdx: k, length: R[j].value, isCompared: true })\r\n                arr[k] = R[j];\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < n1) {\r\n            animationArr.push({ changedIdx: k, length: L[i].value, isCompared: true })\r\n            arr[k] = L[i];\r\n            i++;\r\n            k++;\r\n        }\r\n        while (j < n2) {\r\n            animationArr.push({ changedIdx: k, length: R[j].value, isCompared: true })\r\n\r\n            arr[k] = R[j];\r\n            j++;\r\n            k++;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function animateSort() {\r\n        let i = 0;\r\n        let tempArr = array.slice();\r\n        // console.log(animationArr)\r\n\r\n        let intervalId = setInterval(() => {\r\n            if (i === animationArr.length - 1) {\r\n                clearInterval(intervalId)\r\n                tempArr[tempArr.length - 1].isCompared = false\r\n                tempArr[tempArr.length - 1].isSorted = true\r\n                setArray(tempArr.slice())\r\n\r\n                let j = tempArr.length - 1\r\n                let intervalId2 = setInterval(() => {\r\n                    if (j === 0) {\r\n                        clearInterval(intervalId2)\r\n                    }\r\n                    tempArr[j].isCompared = false\r\n                    tempArr[j].isSorted = true\r\n                    setArray(tempArr.slice())\r\n                    j--;\r\n                }, [sortSpeed])\r\n                setStart(false)\r\n            }\r\n\r\n            if (i >= animationArr.length - tempArr.length) {\r\n                tempArr[animationArr[i].changedIdx].isSorted = true\r\n                setArray(tempArr.slice())\r\n            }\r\n\r\n            if (i !== 0) {\r\n                tempArr[animationArr[i - 1].changedIdx].isCompared = false\r\n            }\r\n\r\n            tempArr[animationArr[i].changedIdx].value = animationArr[i].length\r\n            tempArr[animationArr[i].changedIdx].isCompared = animationArr[i].isCompared\r\n\r\n            setArray(tempArr.slice())\r\n            i++;\r\n        }, [sortSpeed])\r\n\r\n\r\n\r\n    }\r\n\r\n    //QUICKSORT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n    function quickSort(arr, low, high) {\r\n\r\n        if (low < high) {\r\n            // pivot = right;\r\n            let partitionIndex = partition(arr, low, high);\r\n            animationArr.push({ changedIdx: partitionIndex, length: arr[partitionIndex].value, isSorted: true, isCompared: false })\r\n\r\n\r\n            //sort left and right\r\n            quickSort(arr, low, partitionIndex - 1);\r\n            quickSort(arr, partitionIndex + 1, high);\r\n        } else if (low === high) {\r\n            animationArr.push({ changedIdx: low, length: arr[low].value, isSorted: true, isCompared: false })\r\n\r\n        }\r\n        // return arr;\r\n    }\r\n\r\n    function partition(arr, low, high) {\r\n        let pivot = arr[high].value\r\n        let i = low - 1\r\n        let temp\r\n\r\n        animationArr.push({ changedIdx: high, length: arr[high].value, isCompared: true })\r\n\r\n        for (let j = low; j < high; j++) {\r\n            animationArr.push({ changedIdx: j, length: arr[j].value, isCompared: true, isSwitch: false })\r\n\r\n            if (arr[j].value < pivot) {\r\n                i++\r\n                // animationArr.push({ changedIdx: i, length: arr[i].value, isCompared: false, isSorted: false, isSwitch: true })\r\n\r\n                if (i !== j) {\r\n\r\n                    animationArr.push({ changedIdx: i, length: arr[i].value, isCompared: false, isSorted: false, isSwitch: true })\r\n                    // animationArr.push({ changedIdx: j, length: arr[j].value, isSorted: false, isCompared: true })\r\n\r\n                    animationArr.push({ changedIdx: i, length: arr[j].value, isSorted: false, isSwitch: false, isCompared: false })\r\n                    animationArr.push({ changedIdx: j, length: arr[i].value, isSorted: false, isCompared: false, isSwitch: false })\r\n\r\n                    temp = arr[i]\r\n                    arr[i] = arr[j]\r\n                    arr[j] = temp\r\n                }\r\n\r\n                // animationArr.push({ changedIdx: i, length: arr[j].value, isCompared: true })\r\n                // [arr[i], arr[j]] = [arr[j], arr[i]]\r\n\r\n            }\r\n\r\n            animationArr.push({ changedIdx: j, length: arr[j].value, isCompared: false, isSwitch: false })\r\n\r\n\r\n        }\r\n        animationArr.push({ changedIdx: i + 1, length: arr[i + 1].value, isSwitch: false, isCompared: true, isSorted: false })\r\n        animationArr.push({ changedIdx: high, length: arr[high].value, isSwitch: true, isCompared: false, isSorted: false })\r\n\r\n        // animationArr.push({ changedIdx: i + 1, length: arr[i + 1].value, isSwitch: true })\r\n        animationArr.push({ changedIdx: i + 1, length: arr[high].value, isSwitch: false, isCompared: false, isSorted: true })\r\n        animationArr.push({ changedIdx: high, length: arr[i + 1].value, isSwitch: false, isCompared: false, isSorted: false })\r\n\r\n        temp = arr[i + 1]\r\n        arr[i + 1] = arr[high]\r\n        arr[high] = temp\r\n\r\n        // [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]]\r\n\r\n        return (i + 1)\r\n    }\r\n\r\n    function quickAnimate() {\r\n        let i = 0;\r\n        let tempArr = array.slice();\r\n\r\n        let intervalId = setInterval(() => {\r\n            if (i >= animationArr.length - 1) {\r\n                clearInterval(intervalId)\r\n                setStart(false)\r\n            }\r\n            console.log(animationArr[i])\r\n            tempArr[animationArr[i].changedIdx].value = animationArr[i].length\r\n            tempArr[animationArr[i].changedIdx].isSorted = animationArr[i].isSorted\r\n            tempArr[animationArr[i].changedIdx].isCompared = animationArr[i].isCompared\r\n            tempArr[animationArr[i].changedIdx].isSwitch = animationArr[i].isSwitch\r\n\r\n            // tempArr[animationArr[i].changedIdx].isCompared = animationArr[i].isCompared\r\n            // tempArr[animationArr[i].changedIdx].isSorted = animationArr[i].isSorted\r\n            setArray(tempArr.slice())\r\n\r\n            // tempArr[animationArr[i].changedIdx].isCompared = false\r\n\r\n\r\n            i++;\r\n        }, [sortSpeed])\r\n\r\n\r\n    }\r\n\r\n\r\n    //__________________________________________________________\r\n    function startSort() {\r\n        if (!start) {\r\n            setStart(true)\r\n\r\n            if (sortType === \"bubble\") {\r\n                bubbleSort()\r\n            } else if (sortType === \"selection\") {\r\n                selectionSort()\r\n            } else if (sortType === \"insertion\") {\r\n                insertionSort()\r\n                // setStart(false)\r\n\r\n            } else if (sortType === \"heap\") {\r\n                const input = array.slice()\r\n                heapSort(input)\r\n            } else if (sortType === \"merge\") {\r\n                setStart(true)\r\n                let mergedArr = array.slice()\r\n                mergeSort(mergedArr, 0, mergedArr.length - 1)\r\n                animateSort()\r\n                // setStart(false)\r\n            }\r\n            else if (sortType === \"quick\") {\r\n                let quickArr = array.slice()\r\n                setStart(true)\r\n\r\n                animationArr = []\r\n                quickSort(quickArr, 0, quickArr.length - 1);\r\n                quickAnimate()\r\n                // setArray(quickArr.slice())\r\n                // setStart(false)\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    function stopSort() {\r\n        setStart(false)\r\n        window.location.reload();\r\n        // randomizeArray()\r\n        // setArraySize(50)\r\n    }\r\n\r\n\r\n    return (\r\n        <Context.Provider value={{ array, arraySize, setArraySize, setArray, start, setStart, startSort, stopSort, sortSpeed, setSortSpeed, sortType, setSortType, randomizeArray }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport { ContextProvider, Context }","import React, { useContext, useState } from \"react\"\r\nimport { Context } from \"../Context\"\r\nimport useHover from \"../hooks/useHover\"\r\n\r\nfunction Algorithm(props) {\r\n\r\n    const { start, sortType, setSortType, randomizeArray } = useContext(Context)\r\n    const value = useContext(Context)\r\n    const selectedId = sortType === props.name ? \"selected\" : \"\"\r\n\r\n    function handleClick() {\r\n        localStorage.setItem('currSort', props.name);\r\n        setSortType(props.name)\r\n        randomizeArray()\r\n    }\r\n    return (\r\n        <div className=\"algo-box\">\r\n            <button disabled={start} id={selectedId} onClick={handleClick}>{`${props.name} sort`}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Algorithm","import React, { useContext } from \"react\"\r\nimport './styles/display.css';\r\nimport { Context } from '../Context'\r\n\r\nfunction Display() {\r\n\r\n    const { array } = useContext(Context)\r\n    // console.log(array)\r\n\r\n    const bar = array.map((element, index) => {\r\n        let barColor\r\n        if (element.isSwitch) {\r\n            //red\r\n            barColor = \"#DC143C\"\r\n        } else if (element.isCompared) {\r\n            //blue\r\n            barColor = \"#0276FD\"\r\n        }\r\n        else if (element.isSorted) {\r\n            ///green\r\n            barColor = \"#31B94D\"\r\n        }\r\n        else {\r\n            barColor = \"white\"\r\n        }\r\n\r\n        // element.isCompared ? \"blue\" : \"white\"\r\n        return (\r\n            <div\r\n                key={index}\r\n                className=\"bar\"\r\n                style={{\r\n                    height: `${element.value}%`,\r\n                    backgroundColor: barColor\r\n                }}>\r\n            </div>)\r\n    })\r\n\r\n    return (\r\n        <div className=\"display-box\">\r\n            {bar}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Display ","import React, { useContext } from \"react\"\r\nimport useHover from \"../hooks/useHover\"\r\nimport { Context } from \"../Context\"\r\nimport './styles/control.css'\r\n\r\nfunction Control() {\r\n\r\n    const { start, setStart, startSort, stopSort, arraySize, setArraySize, sortSpeed, setSortSpeed } = useContext(Context)\r\n    const [playHover, playRef] = useHover()\r\n    const [resetHover, resetRef] = useHover()\r\n    const playIcon = playHover || start ? \"ri-play-fill\" : \"ri-play-line\"\r\n    const resetIcon = resetHover ? \"ri-refresh-fill\" : \"ri-refresh-line\"\r\n\r\n    function handleSizeChange(event) {\r\n        localStorage.setItem('arrSize', event.target.value)\r\n        setArraySize(localStorage.getItem('arrSize'))\r\n    }\r\n    function handleSpeedChange(event) {\r\n        const speed = 500 - event.target.value\r\n        setSortSpeed(speed)\r\n    }\r\n\r\n    return (\r\n        <div className=\"ctrl-box\">\r\n            <div className=\"media-left\">\r\n                <i ref={playRef} className={playIcon} onClick={startSort}></i>\r\n                <i ref={resetRef} className={resetIcon} onClick={stopSort}></i>\r\n            </div>\r\n            <div className=\"size-media\">\r\n                <h1>n = {arraySize} |</h1>\r\n                <input disabled={start} onChange={handleSizeChange} type=\"range\" min=\"2\" max=\"200\" value={`${arraySize}`} className=\"slider\"></input>\r\n            </div>\r\n            <div className=\"speed-media\">\r\n                <i className=\"ri-speed-line\"></i>\r\n                <h1> |</h1>\r\n                <input disabled={start} onChange={handleSpeedChange} type=\"range\" min=\"0\" max=\"500\" value={`${500 - sortSpeed}`} className=\"slider\"></input>\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Control ","import React from \"react\"\r\nimport Algorithms from \"../components/Algorithm\"\r\nimport Display from \"../components/Display\"\r\nimport Control from \"../components/Control\"\r\nfunction Home() {\r\n\r\n    const styles = {\r\n        backgroundColor: \"tomato\",\r\n        color: \"white\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"algo-container\">\r\n\r\n\r\n            <Algorithms name=\"bubble\" />\r\n            <Algorithms name=\"selection\" />\r\n            <Algorithms name=\"insertion\" />\r\n            <Algorithms name=\"heap\" />\r\n            <Algorithms name=\"merge\" />\r\n            <Algorithms name=\"quick\" />\r\n            <Display />\r\n            <Control />\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport { Route, Switch } from \"react-router-dom\"\nimport Home from \"./pages/Home\"\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ContextProvider } from './Context'\nimport 'remixicon/fonts/remixicon.css'\n\n\nReactDOM.render(\n  <ContextProvider>\n    <Router>\n      <App />\n    </Router>\n  </ContextProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}